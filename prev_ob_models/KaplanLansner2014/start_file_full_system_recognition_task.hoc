//////////////////////////////////////////////////////////////////////////////
//	Combined epithelium olfactory bulb model
//	----------------------------------------
//	Author: bkaplan@kth.se
//  File: start_file.hoc
// 	Initial file to be executed with the command: 
// 	after compiling models with nrnivmodl
// 	mpirun -np 4 $(which nrniv) -mpi start_file.hoc
//////////////////////////////////////////////////////////////////////////////

load_file("nrngui.hoc")		// needed to get stdrun methods
load_file("netparmpi.hoc")	// for mpi usage

// ------------ I N I T I A L   S E T U P ------------
pattern_nr = 0
// pattern_nr can be redefined when calling nrniv -c "x=123" start_file.hoc for example.
if (name_declared("x") == 5) {
	pattern_nr = x
} else {
	print "Please give a pattern number and by using this command:"
	print "mpirun -np 2 $(which nrniv) -mpi -c \"x=1\" start_file.hoc"
}

// ------------- READ NAME OF PARAMETER FILE FROM COMMAND LINE -------------
if (name_declared("param_file") == 4) { // means as strdef
	print "NEURON reads parameters from: ", param_file
} else {
	print "Please give a parameter file by using this command:"
    print "mpirun -np [np] $(which nrniv) -mpi -nobanner -nogui -c \"x=[P]\" -c \"strdef param_file\" -c \"sprint(param_file, \"[PATH]\")\" start_file.hoc"
}

load_file(param_file)
celsius = temperature


objref pnm                  // Parallel Network Manager: manages the setup and running of a parallel network simulation
pnm = new ParallelNetManager(n_cells) // tell the parallel network manager how many cells to handle
n_proc = pnm.pc.nhost()

xopen("tabchannels.hoc")      // channel tables, needed for kfast/kslowtab

load_file("setup_network.hoc")	// includes functions for creating and connecting cells
// set data folder, create files for spike output and parameters
objref testfile
testfile = new File()
strdef testfile_name
sprint(testfile_name, "%s/delme_testfile", folder_name)
testfile.wopen(testfile_name)
testfile.printf("delme")

read_orn_parameters(orn_params_file) // file created by create_parameterfile_for_simple_OB.py
/*read_mit_parameters(mit_params_file) // file created by create_parameterfile_for_simple_OB.py*/
read_pyr_parameters(pyr_params_file) // file created by CreatePyrParameters
read_readout_parameters(readout_params_file) // file created by CreatereadoutParameters

distribute_all_cells()

init_rnd()
create_cells_with_oc()
connect_cells_with_oc()

record_time_vec()
// record_orn_testcells()
// record_mit_testcells()
// record_gran_testcells()
// record_pg_testcells()
record_readout_voltages()
if (record_voltages != 0) {
	record_sample_mit_cells()
	record_sample_gran_cells()
	record_sample_pg_cells()
	record_pyr_sample()
	/*record_pyr_ca_sample()*/
	record_basket_sample()
	record_rsnp_sample()
	/*record_pyr_testcells()*/
	/*record_basket_testcells()*/
	/*record_rsnp_testcells()*/
	record_cells_from_file()
}

/*init_spikes() // calls setup_input_spikes*/

pnm.want_all_spikes()
// CHANGE dt:
dt = time_step // defined in network_parameters
steps_per_ms = 1. / dt
pnm.set_maxstep(steps_per_ms)
setdt()
stdinit()
start = startsw()
// RUN
/*wait = pnm.pc.wait_time()*/
pnm.psolve(t_sim)


print_time_vec()
// print_orn_testcells()
print_readout_voltages()
//
if (record_voltages != 0) {
	/*print_selected_mit_cells()*/
	rint_mit_testcells()
	print_gran_testcells()
	print_pg_testcells()
	print_sample_mit_cells()
	print_sample_gran_cells()
	print_sample_pg_cells()
	print_pyr_sample()
	/*print_pyr_ca_sample()*/
	print_basket_sample()
	print_rsnp_sample()
	/*print_pyr_testcells()*/
	/*print_basket_testcells()*/
	/*print_rsnp_testcells()*/
	print_cells_from_file()
}



// save all output spikes into a dedicated process individual file
waittime = pnm.pc.barrier()
write_spikes_to_files(pattern_nr)
waittime = pnm.pc.barrier()

pnm.pc.runworker()
pnm.pc.done()
